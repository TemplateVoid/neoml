/* Copyright Â© 2017-2020 ABBYY Production LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--------------------------------------------------------------------------------------------------------------*/

layout(std430, binding=1) readonly buffer Source { vec4 source[]; };
layout(std430, binding=2) readonly buffer Filter { vec4 flt[]; };
layout(std430, binding=3) readonly buffer FreeTerm { float freeTerm[]; };
layout(std430, binding=4) writeonly buffer Result { float result[]; };
layout(std430, binding=5) writeonly buffer Dump { vec4 dump[]; };

// 10x10x120/4
shared vec4 sharedData[3000];

void main()
{
	int x = ID_X;
	int y = ID_Y;
	int c = ID_Z;
	int b = c / P.filterCount;
	c -= b * P.filterCount;

	bool isResult = x < P.width && y < P.height && c < P.filterCount && b < P.batchSize;
	
	int startInputX = x - P.padding.x - LOCAL_ID_X;
	int startInputY = y - P.padding.y - LOCAL_ID_Y;
	float res = (P.isFreeTerm != 0) ? freeTerm[c] : 0;

	int startIndex = LOCAL_ID_Y * 8 + LOCAL_ID_X;
	int sharedX = min(P.inputWidth, 10);
	int sharedY = min(P.inputHeight, 10);
	int geoSize = sharedX * sharedY;

	for (int startChannel4 = 0; startChannel4 < P.inputChannels4; startChannel4 += 30) {
		int index = startIndex;
		int channelCount = min(30, P.inputChannels4 - startChannel4);
		while (index < channelCount * geoSize) {
			int ch4 = index / geoSize;
			int inputY = (index - ch4 * geoSize) / sharedX;
			int inputX = index - ch4 * geoSize - inputY * sharedX;
			
			ch4 += startChannel4;
			inputY += startInputY;
			inputX += startInputX;
			if(inputX >= 0 && inputX < P.inputWidth) {
				int inputPos = P.inputWidth * (P.inputHeight * (b * P.inputChannels4 + ch4) + inputY) + inputX;
				sharedData[index] = source[inputPos];
			}
			else {
				sharedData[index] = vec4(0.0);
			}
			index += 64;
		}

		memoryBarrierShared();
		barrier();
		
		//for(int i = 0; i < 32; i++) {
			//dump[i] = sharedData[i];
	//	}

		if (isResult) {
			int filterPos = (c * P.inputChannels4 + startChannel4) * 9;
			int startPos = LOCAL_ID_Y * sharedX + LOCAL_ID_X;
			
			for (int ch4 = 0 ; ch4 < channelCount; ++ch4) {
				int pos = startPos;
				for(int j = 0; j < 3; ++j) {
					res += dot(sharedData[pos], flt[filterPos++]);
					res += dot(sharedData[pos+1], flt[filterPos++]);
					res += dot(sharedData[pos+2], flt[filterPos++]);
					pos += sharedX;
				}
				startPos += geoSize;
			}
		}
		memoryBarrierShared();
		barrier();
	}

	if (isResult) {
		// write output
		int outputPos = ((b * P.height + y) * P.width + x) * P.filterCount + c;
		result[outputPos] = res;
	}
}
